(define resolve 
  (lambda (environment varname) 
    (cond 
      ((null? environment) #false) 
      ((equal? (car (car environment)) varname) (car (cdr (car environment)))) 
      (else (resolve (cdr environment))) ) ))

(define extend-env (lambda (l-of-vars l-of-vals env) (cond ((or
(null? l-of-vars) (null? l-of-vals)) env) ((symbol? l-of-vars) (cons
(list l-of-vars l-of-vals) env)) (else (extend-env (cdr l-of-vars)
(cdr l-of-vals) (cons (list (car l-of-vars) (car l-of-vals)) env))) ) ) )


(define run-neo-parsed-code (lambda (parsed-code env) (cond ((equal? (car parsed-code) 'num-exp) (cadr parsed-code));(num-exp 22)
                                                            ((equal? (car parsed-code) 'var-exp) (resolve env (cadr parsed-code)));(math-exp op (neo-exp) (neo-exp))
                                                            ((equal? (car parsed-code) 'math-exp) (run-math-exp (cadr parsed-code) (run-neo-parsed-code(caddr parsed-code) env) (run-neo-parsed-code (cadddr parsed-code) env)))
                                                            ((equal? (car parsed-code) 'func-exp) (run-neo-parsed-code (cadr (caddr parsed-code)) env)) (else (run-neo-parsed-code (cadr parsed-code) ;function expression
                                                            (extend-env (cadr (cadr (cadr parsed-code)))
                                                            (map (lambda (exp) (run-neo-parsed-code exp env)) (caddr parsed-neo-code)) env);environment scope update
                                                            ) ) ) ) )

(define neo-parser (lambda (neo-code) (cond ((number? neo-code) (list 'num-exp neo-code)) ((symbol? neo-code) (list 'var-exp neo-code)) ;(math op num1 num2)
                                            > (math-exp op (neo-exp) (neo-exp)) ((equal? (car neo-code) 'math) (list 'math-exp (cadr neo-code) (neo-parser
                                            (caddr neo-code)) (neo-parser (cadddr neo-code)))) ;(function (x y z,...) x)
                                            ((equal? (car neo-code) 'function) (list 'func-exp (list 'params (cadr neo-code)) (list 'body-exp (neo-parser (caddr neo-code)))))
                                            ((equal? (car neo-code) 'call) (list 'app-exp (neo-parser (cadr neo-code)) (map neo-parser (caddr neo-code)))) (else #false) ) ) )

(call (function (a) (local-vars ((x 5) (y 6) (z 9)) ((call (function (b)(math + a (math * b x)))) (2)))) (3))
